/*
    Copyright (C) 2013 Johan Mattsson

    This library is free software; you can redistribute it and/or modify 
    it under the terms of the GNU Lesser General Public License as 
    published by the Free Software Foundation; either version 3 of the 
    License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful, but 
    WITHOUT ANY WARRANTY; without even the implied warranty of 
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
    Lesser General Public License for more details.
*/

namespace BirdFont {

/** Default character sets for several languages. */
public class DefaultCharacterSet {
	
	public static DefaultLanguages languages;
	
	public static void create_default_character_sets () {
		languages = new DefaultLanguages ();
		
		add_language (t_("Default language"), "", "");
		add_language (t_("Private use area"), "PRIVATE_USE", "");
		
		add_language (t_("Chinese"), "zh", "");
		add_language (t_("English"), "en", "A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z");
		add_language (t_("Greek"), "el", "Œë Œí Œì Œî Œï Œñ Œó Œò Œô Œö Œõ Œú Œù Œû Œü Œ† Œ° Œ£ Œ§ Œ• Œ¶ Œß Œ® Œ© Œ± Œ≤ Œ≥ Œ¥ Œµ Œ∂ Œ∑ Œ∏ Œπ Œ∫ Œª Œº ŒΩ Œæ Œø œÄ œÅ œÉ œÇ œÑ œÖ œÜ œá œà œâ");
		add_language (t_("Japanese"), "ja", "");
		add_language (t_("Javanese"), "jv", "Í¶Ä Í¶Å Í¶Ç Í¶É Í¶Ñ Í¶Ö Í¶Ü Í¶á Í¶à Í¶â Í¶ä Í¶ã Í¶å Í¶ç Í¶é Í¶è Í¶ê Í¶ë Í¶í Í¶ì Í¶î Í¶ï Í¶ñ Í¶ó Í¶ò Í¶ô Í¶ö Í¶õ Í¶ú Í¶ù Í¶û Í¶ü Í¶† Í¶° Í¶¢ Í¶£ Í¶§ Í¶• Í¶¶ Í¶ß Í¶® Í¶© Í¶™ Í¶´ Í¶¨ Í¶≠ Í¶Æ Í¶Ø Í¶∞ Í¶± Í¶≤ Í¶≥ Í¶¥ Í¶µ Í¶∂ Í¶∑ Í¶∏ Í¶π Í¶∫ Í¶ª Í¶º Í¶Ω Í¶æ Í¶ø ÍßÄ ÍßÅ ÍßÇ ÍßÉ ÍßÑ ÍßÖ ÍßÜ Íßá Íßà Íßâ Íßä Íßã Íßå Íßç Íßè Íßê Íßë Íßí Íßì Íßî Íßï Íßñ Íßó Íßò Íßô Íßû Íßü A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z");
		add_language (t_("Russian"), "ro", "–ê –ë –í –ì –î –ï –Å –ñ –ó –ò –ô –ö –õ –ú –ù –û –ü –† –° –¢ –£ –§ –• –¶ –ß –® –© –™ –´ –¨ –≠ –Æ –Ø –∞ –± –≤ –≥ –¥ –µ —ë –∂ –∑ –∏ –π –∫ –ª –º –Ω –æ –ø —Ä —Å —Ç —É —Ñ —Ö —Ü —á —à —â —ä —ã —å —ç —é —è");
		add_language (t_("Swedish"), "sv", "A B C D E F G H I J K L M N O P Q R S T U V W X Y Z √Ö √Ñ √ñ a b c d e f g h i j k l m n o p q r s t u v w x y z √• √§ √∂");
	}
	
	/** Add a new language to the menu for default character set.
	 * @param language A localized string for the name of the language.
	 * @param language_code ISO code
	 * @param characters all characters (including characters with diacritical marks).
	 * For languages with too many glyphs should this string be left empty. 
	 * See the functions for chinese and japanese.
	 */
	public static void add_language (string language, string language_code, string characters) {
		DefaultLanguages.names.add (language);
		DefaultLanguages.codes.add (language_code);
		DefaultLanguages.characters.add (characters);
	}
	
	/** Add all glyphs for the current locale settings to this glyph range. */
	public static void use_default_range (GlyphRange gr) {
		string language = get_prefered_language_code ();
		
		if (language == "PRIVATE_USE") {
			use_private_area (gr);
		} else if (language.has_prefix ("ja")) {
			use_default_range_japanese (gr);
		} else if (language.has_prefix ("zh")) { // TODO: not just simplified chinese
			use_default_range_chinese (gr);
		} else {
			use_default_range_alphabetic (gr);
		}
	}
	
	private static string get_prefered_language_code () {
		string prefered_language;
		string[] languages = Intl.get_language_names ();
		
		prefered_language = Preferences.get ("language");
		
		if (prefered_language != "") {
			return prefered_language;
		}
		
		if (languages.length == 0) {
			return "";
		}
		
		return languages[0];
	}
	
	public static string get_characters_for_prefered_language () {
		string lang = get_prefered_language_code ();
		int i = 0;
		string characters = "";
		
		foreach (string code in DefaultLanguages.codes) {
			if (lang.has_prefix (code)) {
				characters = DefaultLanguages.characters.get (i);
			}
			i++;
		}
		
		return characters;
	}
	
	private static void use_private_area (GlyphRange gr) {
		gr.add_range (0xe000, 0xf8ff);
	}
	
	private static void use_default_range_alphabetic (GlyphRange gr) {
		string lower_case, upper_case;
		string all_characters;
		
		all_characters = get_characters_for_prefered_language ();
		if (all_characters != "") {
			foreach (string c in all_characters.split (" ")) {
				gr.add_single (c.get_char ());
			}
		} else {			
			/// All lower case letters in alphabetic order separated by space
			lower_case = t_("a b c d e f g h i j k l m n o p q r s t u v w x y z");
			
			/// All upper case letters in alphabetic order separated by space
			upper_case = t_("A B C D E F G H I J K L M N O P Q R S T U V W X Y Z");

			foreach (string c in lower_case.split (" ")) {
				gr.add_single (c.get_char ());
			}

			foreach (string c in upper_case.split (" ")) {
				gr.add_single (c.get_char ());
			}
		}
		
		gr.add_range ('0', '9');
		
		gr.add_single (' '); // TODO: add all spaces here.
		
		gr.add_single ('.');
		gr.add_single ('?');
		
		gr.add_single (',');
		
		gr.add_single ('‚Äô');

		gr.add_range ('‚Äú', '‚Äù');

		gr.add_single ('&');
		
		gr.add_range (':', ';');
		
		gr.add_single ('/'); 
		
		gr.add_range ('!', '/');
		
		gr.add_single ('-');
		gr.add_range ('‚Äê', '‚Äî');
		gr.add_range ('<', '@');
		gr.add_range ('(', ')');
	}
	
	public static void  use_default_range_japanese (GlyphRange gr) {
		// hiragana
		gr.add_range ('„ÅÅ', '„Çñ');
		gr.add_range ('„Çô', '„Çü');

		// halfwidth and fullwidth forms
		gr.add_range ('!', '·Ñí');
		gr.add_range ('ÔøÇ', 'Ôøá');
		gr.add_range ('Ôøä', 'Ôøè');
		gr.add_range ('Ôøí', 'Ôøó');
		gr.add_range ('Ôøö', 'Ôøú');
		gr.add_range ('¬¢', '‚Ç©');
		gr.add_range ('‚îÇ', '‚óã');

		// katakana phonetic extensions
		gr.add_range ('„á∞', '„áø');

		// kana supplement
		gr.add_single ('õÄÄ');
		gr.add_single ('õÄÅ');

		// kanbun
		gr.add_range ('„Üê', '„Üü');
	}
	
	public static void use_default_range_chinese (GlyphRange gr) {
		string pinyin_tones;
		
		// pinyin
		pinyin_tones  = "Àá Àâ Àä Àã Àô ƒÅ √° «é √† ≈ç √≥ «í √≤ ƒì √© ƒõ √® ƒ´ √≠ «ê √¨ ≈´ √∫ «î √π «ñ «ò «ö «ú √º ƒÄ √Å «ç √Ä ≈å √ì «ë √í ƒí √â ƒö √à";
		gr.add_range ('a', 'z');
		
		foreach (string c in pinyin_tones.split (" ")) {
			gr.add_single (c.get_char ());
		}		

		// CJK punctuations and symbols
		gr.add_range ('„ÄÄ', '„ÄÖ');
		gr.add_range ('„Äá', '„Äë');
		gr.add_range ('„Äì', '„Äü');
		gr.add_range ('Ô∏ê', 'Ô∏ô'); 

		// CJK numbers and months
		gr.add_range ('0', '9');
		gr.add_range ('„à†', '„à©');
		gr.add_range ('„ãÄ', '„ãã');
		gr.add_range ('„âë', '„âü');
		gr.add_range ('„ä±', '„äø');
		gr.add_range ('„äÄ', '„äâ');

		// CJK fullwidth letters and symbols
		gr.add_range ('ÔºÅ', 'ÔΩ•');
		gr.add_range ('Ôø†', 'Ôø¶');
		gr.add_single ('Ôø®');

		// CJK special characters
		gr.add_range ('„çò', '„èø');
		gr.add_range ('„ãå', '„ãè');

		// CJK strokes
		gr.add_range ('„áÄ', '„á¢');

		// CJK supplements
		gr.add_range ('‚∫Ä', '‚∫ô');
		gr.add_range ('‚∫õ', '‚ª≥');

		// GB2312 (punctuations)
		gr.add_single ('‚Äï');
		gr.add_single ('¬§');
		gr.add_single ('¬ß');
		gr.add_single ('¬®');
		gr.add_single ('¬∞');
		gr.add_single ('¬±');
		gr.add_single ('√ó');
		gr.add_single ('√∑');

		// GB2312 (greek letters)
		gr.add_range ('Œë', 'Œ©');
		gr.add_range ('Œ±', 'œâ');

		// GB2312 (cyrillic letters)
		gr.add_range ('–ê', '—è');
		gr.add_single ('—ë');
		gr.add_single ('–Å');
		
		// GB2312 (U+4e00 to U+fa20)
		gr.add_range ('‰∏Ä', 'Èæ•');
		gr.add_single ('Ô§¨');
		gr.add_single ('Ô•π');
		gr.add_single ('Ô¶ï');
		gr.add_single ('Ôßß');
		gr.add_single ('Ôß±');
		
		gr.add_range ('Ô®å', 'Ô®è');
		gr.add_single ('Ô®ë');
		gr.add_single ('Ô®ì');
		gr.add_single ('Ô®î');
		gr.add_single ('Ô®ò');
		gr.add_single ('Ô®ü');
		gr.add_single ('Ô®†');
		gr.add_single ('Ô®°');
		gr.add_single ('Ô®£');
		gr.add_single ('Ô®§');
		gr.add_single ('Ô®ß');
		gr.add_single ('Ô®®');
		gr.add_single ('Ô®©');
	}
	
	public static void use_full_unicode_range (GlyphRange gr) {
		CharDatabase.get_full_unicode (gr);
		
		if (gr.get_length () == 0) {
			try {
				gr.parse_ranges ("null-Õ∑ Õ∫-Õæ ŒÑ-Œä Œå Œé-Œ° Œ£-‘ß ‘±-’ñ ’ô-’ü ’°-÷á ÷â-÷ä ÷è ÷ë-◊á ◊ê-◊™ ◊∞-◊¥ ÿÄ-ÿÑ ÿÜ-ÿõ ÿû-‹ç ‹è-›ä ›ç-ﬁ± ﬂÄ-ﬂ∫ ‡†Ä-‡†≠ ‡†∞-‡†æ ‡°Ä-‡°õ ‡°û ‡¢† ‡¢¢-‡¢¨ ‡£§-‡£æ ‡§Ä-‡•∑ ‡•π-‡•ø ‡¶Å-‡¶É ‡¶Ö-‡¶å ‡¶è-‡¶ê ‡¶ì-‡¶® ‡¶™-‡¶∞ ‡¶≤ ‡¶∂-‡¶π ‡¶º-‡ßÑ ‡ßá-‡ßà ‡ßã-‡ßé ‡ßó ‡ßú-‡ßù ‡ßü-‡ßª ‡®Å-‡®É ‡®Ö-‡®ä ‡®è-‡®ê ‡®ì-‡®® ‡®™-‡®∞ ‡®≤-‡®≥ ‡®µ-‡®∂ ‡®∏-‡®π ‡®º ‡®æ-‡©Ç ‡©á-‡©à ‡©ã-‡©ç ‡©ë ‡©ô-‡©ú ‡©û ‡©§-‡©µ ‡™Å-‡™É ‡™Ö-‡™ç ‡™è-‡™ë ‡™ì-‡™® ‡™™-‡™∞ ‡™≤-‡™≥ ‡™µ-‡™π ‡™º-‡´Ö ‡´á-‡´â ‡´ã-‡´ç ‡´ê ‡´†-‡´± ‡¨Å-‡¨É ‡¨Ö-‡¨å ‡¨è-‡¨ê ‡¨ì-‡¨® ‡¨™-‡¨∞ ‡¨≤-‡¨≥ ‡¨µ-‡¨π ‡¨º-‡≠Ñ ‡≠á-‡≠à ‡≠ã-‡≠ç ‡≠ñ-‡≠ó ‡≠ú-‡≠ù ‡≠ü-‡≠∑ ‡ÆÇ-‡ÆÉ ‡ÆÖ-‡Æä ‡Æé-‡Æê ‡Æí-‡Æï ‡Æô-‡Æö ‡Æú ‡Æû-‡Æü ‡Æ£-‡Æ§ ‡Æ®-‡Æ™ ‡ÆÆ-‡Æπ ‡Ææ-‡ØÇ ‡ØÜ-‡Øà ‡Øä-‡Øç ‡Øê ‡Øó ‡Ø§-‡Ø∫ ‡∞Å-‡∞É ‡∞Ö-‡∞å ‡∞é-‡∞ê ‡∞í-‡∞® ‡∞™-‡∞≥ ‡∞µ-‡∞π ‡∞Ω-‡±Ñ ‡±Ü-‡±à ‡±ä-‡±ç ‡±ï-‡±ñ ‡±ò-‡±ô ‡±†-‡±Ø ‡±∏-‡±ø ‡≤Ç-‡≤É ‡≤Ö-‡≤å ‡≤é-‡≤ê ‡≤í-‡≤® ‡≤™-‡≤≥ ‡≤µ-‡≤π ‡≤º-‡≥Ñ ‡≥Ü-‡≥à ‡≥ä-‡≥ç ‡≥ï-‡≥ñ ‡≥û ‡≥†-‡≥Ø ‡≥±-‡≥≤ ‡¥Ç-‡¥É ‡¥Ö-‡¥å ‡¥é-‡¥ê ‡¥í-‡¥∫ ‡¥Ω-‡µÑ ‡µÜ-‡µà ‡µä-‡µé ‡µó ‡µ†-‡µµ ‡µπ-‡µø ‡∂Ç-‡∂É ‡∂Ö-‡∂ñ ‡∂ö-‡∂± ‡∂≥-‡∂ª ‡∂Ω ‡∑Ä-‡∑Ü ‡∑ä ‡∑è-‡∑î ‡∑ñ ‡∑ò-‡∑ü ‡∑≤-‡∑¥ ‡∏Å-‡∏∫ ‡∏ø-‡πõ ‡∫Å-‡∫Ç ‡∫Ñ ‡∫á-‡∫à ‡∫ä ‡∫ç ‡∫î-‡∫ó ‡∫ô-‡∫ü ‡∫°-‡∫£ ‡∫• ‡∫ß ‡∫™-‡∫´ ‡∫≠-‡∫π ‡∫ª-‡∫Ω ‡ªÄ-‡ªÑ ‡ªÜ ‡ªà-‡ªç ‡ªê-‡ªô ‡ªú-‡ªü ‡ºÄ-‡Ωá ‡Ωâ-‡Ω¨ ‡Ω±-‡æó ‡æô-‡æº ‡ææ-‡øå ‡øé-‡øö ·ÄÄ-·ÉÖ ·Éá ·Éç ·Éê-·âà ·âä-·âç ·âê-·âñ ·âò ·âö-·âù ·â†-·äà ·ää-·äç ·äê-·ä∞ ·ä≤-·äµ ·ä∏-·äæ ·ãÄ ·ãÇ-·ãÖ ·ãà-·ãñ ·ãò-·åê ·åí-·åï ·åò-·çö ·çù-·çº ·éÄ-·éô ·é†-·è¥ ·êÄ-·öú ·ö†-·õ∞ ·úÄ-·úå ·úé-·úî ·ú†-·ú∂ ·ùÄ-·ùì ·ù†-·ù¨ ·ùÆ-·ù∞ ·ù≤-·ù≥ ·ûÄ-·üù ·ü†-·ü© ·ü∞-·üπ ·†Ä-·†é ·†ê-·†ô ·††-·°∑ ·¢Ä-·¢™ ·¢∞-·£µ ·§Ä-·§ú ·§†-·§´ ·§∞-·§ª ·•Ä ·•Ñ-·•≠ ·•∞-·•¥ ·¶Ä-·¶´ ·¶∞-·ßâ ·ßê-·ßö ·ßû-·®õ ·®û-·©û ·©†-·©º ·©ø-·™â ·™ê-·™ô ·™†-·™≠ ·¨Ä-·≠ã ·≠ê-·≠º ·ÆÄ-·Ø≥ ·Øº-·∞∑ ·∞ª-·±â ·±ç-·±ø ·≥Ä-·≥á ·≥ê-·≥∂ ·¥Ä-·∑¶ ·∑º-·ºï ·ºò-·ºù ·º†-·ΩÖ ·Ωà-·Ωç ·Ωê-·Ωó ·Ωô ·Ωõ ·Ωù ·Ωü-·ΩΩ ·æÄ-·æ¥ ·æ∂-·øÑ ·øÜ-·øì ·øñ-·øõ ·øù-·øØ ·ø≤-·ø¥ ·ø∂-·øæ ‚ÄÄ-‚Å§ ‚Å™-‚Çé ‚Çê-‚Çú ‚Ç†-‚Çπ ‚Éê-‚É∞ ‚ÑÄ-‚Üâ ‚Üê-‚è≥ ‚êÄ-‚ê¶ ‚ëÄ-‚ëä ‚ë†-‚õø ‚úÅ-‚≠å ‚≠ê-‚≠ô ‚∞Ä-‚∞Æ ‚∞∞-‚±û ‚±†-‚≥≥ ‚≥π-‚¥• ‚¥ß ‚¥≠ ‚¥∞-‚µß ‚µØ-‚µ∞ ‚µø-‚∂ñ ‚∂†-‚∂¶ ‚∂®-‚∂Æ ‚∂∞-‚∂∂ ‚∂∏-‚∂æ ‚∑Ä-‚∑Ü ‚∑à-‚∑é ‚∑ê-‚∑ñ ‚∑ò-‚∑û ‚∑†-‚∏ª ‚∫Ä-‚∫ô ‚∫õ-‚ª≥ ‚ºÄ-‚øï ‚ø∞-‚øª „ÄÄ-„Äø „ÅÅ-„Çñ „Çô-„Éø „ÑÖ-„Ñ≠ „Ñ±-„Üé „Üê-„Ü∫ „áÄ-„á£ „á∞-„àû „à†-„ãæ „åÄ-„èø ‰∑Ä-‰∑ø ÍÄÄ-Ííå Ííê-ÍìÜ Íìê-Íò´ ÍôÄ-Íöó Íöü-Íõ∑ ÍúÄ-Íûé Íûê-Íûì Íû†-Íû™ Íü∏-Í†´ Í†∞-Í†π Í°Ä-Í°∑ Í¢Ä-Í£Ñ Í£é-Í£ô Í£†-Í£ª Í§Ä-Í•ì Í•ü-Í•º Í¶Ä-Íßç Íßè-Íßô Íßû-Íßü Í®Ä-Í®∂ Í©Ä-Í©ç Í©ê-Í©ô Í©ú-Í©ª Í™Ä-Í´Ç Í´õ-Í´∂ Í¨Å-Í¨Ü Í¨â-Í¨é Í¨ë-Í¨ñ Í¨†-Í¨¶ Í¨®-Í¨Æ ÍØÄ-ÍØ≠ ÍØ∞-ÍØπ Ìû∞-ÌüÜ Ìüã-Ìüª Ô§Ä-Ô©≠ Ô©∞-Ô´ô Ô¨Ä-Ô¨Ü Ô¨ì-Ô¨ó Ô¨ù-Ô¨∂ Ô¨∏-Ô¨º Ô¨æ Ô≠Ä-Ô≠Å Ô≠É-Ô≠Ñ Ô≠Ü-ÔØÅ ÔØì-Ô¥ø Ôµê-Ô∂è Ô∂í-Ô∑á Ô∑∞-Ô∑Ω Ô∏Ä-Ô∏ô Ô∏†-Ô∏¶ Ô∏∞-Ôπí Ôπî-Ôπ¶ Ôπ®-Ôπ´ Ôπ∞-Ôπ¥ Ôπ∂-Ôªº ÔºÅ-Ôææ ÔøÇ-Ôøá Ôøä-Ôøè Ôøí-Ôøó Ôøö-Ôøú Ôø†-Ôø¶ Ôø®-ÔøÆ Ôøπ-ÔøΩ êÄÄ-êÄã êÄç-êÄ¶ êÄ®-êÄ∫ êÄº-êÄΩ êÄø-êÅç êÅê-êÅù êÇÄ-êÉ∫ êÑÄ-êÑÇ êÑá-êÑ≥ êÑ∑-êÜä êÜê-êÜõ êáê-êáΩ êäÄ-êäú êä†-êãê êåÄ-êåû êå†-êå£ êå∞-êçä êéÄ-êéù êéü-êèÉ êèà-êèï êêÄ-êíù êí†-êí© ê†Ä-ê†Ö ê†à ê†ä-ê†µ ê†∑-ê†∏ ê†º ê†ø-ê°ï ê°ó-ê°ü ê§Ä-ê§õ ê§ü-ê§π ê§ø ê¶Ä-ê¶∑ ê¶æ-ê¶ø ê®Ä-ê®É ê®Ö-ê®Ü ê®å-ê®ì ê®ï-ê®ó ê®ô-ê®≥ ê®∏-ê®∫ ê®ø-ê©á ê©ê-ê©ò ê©†-ê©ø ê¨Ä-ê¨µ ê¨π-ê≠ï ê≠ò-ê≠≤ ê≠∏-ê≠ø ê∞Ä-ê±à êπ†-êπæ ëÄÄ-ëÅç ëÅí-ëÅØ ëÇÄ-ëÉÅ ëÉê-ëÉ® ëÉ∞-ëÉπ ëÑÄ-ëÑ¥ ëÑ∂-ëÖÉ ëÜÄ-ëáà ëáê-ëáô ëöÄ-ëö∑ ëõÄ-ëõâ íÄÄ-íçÆ íêÄ-íë¢ íë∞-íë≥ ìÄÄ-ìêÆ ñ†Ä-ñ®∏ ñºÄ-ñΩÑ ñΩê-ñΩæ ñæè-ñæü õÄÄ-õÄÅ ùÄÄ-ùÉµ ùÑÄ-ùÑ¶ ùÑ©-ùáù ùàÄ-ùâÖ ùåÄ-ùçñ ùç†-ùç± ùêÄ-ùö• ùö®-ùüã ùüé-ùüø û∏Ä-û∏É û∏Ö-û∏ü û∏°-û∏¢ û∏§ û∏ß û∏©-û∏≤ û∏¥-û∏∑ û∏π û∏ª ûπÇ ûπá ûπâ ûπã ûπç-ûπè ûπë-ûπí ûπî ûπó ûπô ûπõ ûπù ûπü ûπ°-ûπ¢ ûπ§ ûπß-ûπ™ ûπ¨-ûπ≤ ûπ¥-ûπ∑ ûππ-ûπº ûπæ û∫Ä-û∫â û∫ã-û∫õ û∫°-û∫£ û∫•-û∫© û∫´-û∫ª ûª∞-ûª± üÄÄ-üÄ´ üÄ∞-üÇì üÇ†-üÇÆ üÇ±-üÇæ üÉÅ-üÉè üÉë-üÉü üÑÄ-üÑä üÑê-üÑÆ üÑ∞-üÖ´ üÖ∞-üÜö üá¶-üàÇ üàê-üà∫ üâÄ-üâà üâê-üâë üåÄ-üå† üå∞-üåµ üå∑-üçº üéÄ-üéì üé†-üèÑ üèÜ-üèä üè†-üè∞ üêÄ-üêæ üëÄ üëÇ-üì∑ üìπ-üìº üîÄ-üîΩ üïÄ-üïÉ üïê-üïß üóª-üôÄ üôÖ-üôè üöÄ-üõÖ üúÄ-üù≥ Ø†Ä-Ø®ù Û†ÄÅ Û†Ä†-Û†Åø Û†ÑÄ-Û†áØ");
			} catch (MarkupError e) {
				warning (e.message);
				gr.add_range ('\0', (unichar) 0xFFF8);
			}
		}
	}
	
	public static DefaultLanguages get_default_languages () {
		return languages;
	}
}

public class DefaultLanguages {
	public static Gee.ArrayList<string> names;
	public static Gee.ArrayList<string> codes;
	public static Gee.ArrayList<string> characters;
	
	public DefaultLanguages () {
		names = new Gee.ArrayList<string> ();
		codes = new Gee.ArrayList<string> ();
		characters = new Gee.ArrayList<string> ();		
	}

	public string? get_name (int index) {
		if (0 <= index < names.size) {
			return names.get (index);
		}
		
		return null;
	}

	public string? get_code (int index) {
		if (0 <= index < codes.size) {
			return codes.get (index);
		}
		
		return null;
	}
}

}
