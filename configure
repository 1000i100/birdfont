#!/usr/bin/python
import subprocess
import os
import sys
import time;
from optparse import OptionParser

VERSION = '0.8'

def write_config ():
	print ("Writing Config.vala")

	vars = (('VERSION', VERSION),
		('BUILD_TIMESTAMP', time.asctime( time.localtime(time.time()))),
		('PREFIX', options.prefix),
		)

	f = open('./libbirdfont/Config.vala', 'w+')
	f.write("// Don't edit this file -- it's generated by the build script\n")
	f.write("namespace Supplement {\n")

	var_line = '	internal static const string %s = "%s";\n'
	for name, value in vars:
		f.write(var_line % (name, value))

	f.write("}")

def test_vala_version (a, b, c):
	print ("Checking for vala version >= %s.%s.%s" % (a, b, c))
	v = subprocess.check_output ("valac --version", shell=True)
	v = v.replace ("Vala ", "");
	print ("Found version " + v)
	valac_version = [int(n) for n in v.split (".")]
	return [a,b,c] < valac_version


def configure ():
	if not test_vala_version (0, 17, 3):
		print ("Can't find a suitable vala compiler.")
		exit (1)

	libs = [ 'cairo', 'gdk-pixbuf-2.0', 'gio-2.0', 'glib-2.0', 'gtk+-2.0', 'libxml-2.0', 'webkit-1.0', 'libsoup-2.4' ]

	for lib in libs:
		print ("Looking for library: " + lib + "\t\t")
		process = subprocess.Popen ('pkg-config --modversion ' + lib, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
		process.communicate()[0]
		if not process.returncode == 0:
			print ("Not found")
			exit (1)
	
	write_config ()

	v = subprocess.check_output ('mkdir -p build', shell=True)
	v = subprocess.check_output ('touch build/configured', shell=True)

	print ("");
	print ("Done");


parser = OptionParser()
parser.add_option("-p", "--prefix", dest="prefix", help="install prefix", metavar="PREFIX")

(options, args) = parser.parse_args()

if not options.prefix:
	options.prefix = "/usr"

configure ()
